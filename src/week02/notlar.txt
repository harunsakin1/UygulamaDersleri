
##2.Hafta 1.Gun##
--> Degisken Isimlendirme :
-- Degisken isimlendirirken eger degiskenin ismi bir kelimeden fazla ise aralarinda bosluk olmaz. Alt cizgi olabilir ya da camelCase denilen degisken isimlendirme yontemi kullanilabilir. camelCase denilen yapi da soyledir : 1.kelimenin tüm harfleri kucuk sonra gelen her kelimenin ilk harfi büyük olacak sekilde yazilir.

-- Degisken isimlendirmede ilk karakter _, $,£(gibi para sembolleri) bu iki ozel karakter disinda hicbir ozel karakterle baslayamaz. Ayrica rakam ile de baslayamaz. Ya harf ile baslayacak ya da _ veya $ sembolu ile baslayacak.

--> Veri Tipleri :
-- Tam Sayi Degerleri (Bit sayisina gore büyükten kucuge) : Long(64 bit), int(32 bit), short(16 bit), byte(8 bit).
-- Ondalikli Sayi Degerleri : Double(64 bit), Float(32 bit).
-- Metinsel ifadeler : String--> Icerisine bir paragraf da yazilabilir bir kelime de yazilabilir. Her türlü metinsel ifadeyi icerisinde tutar. Cift tirnak ile kullanilir.
                       Char--> Icerisinde tek bir karakter tutabilir. Tek tirnak ile kullanilir. Fakat icerisine sayi da girilebilir. Icerisine girilen sayiyi ASCII tablosundaki degerini de icerisinde tutabilir.
                       Örnegin char ch=65 dedigimizde bize cikti olarak A harfini verecektir.
--Boolean Veri Tipi : Icerisinde sadece true ya da false tutabilir. Bir kosulun dogru ya da yanlis oldugunu sorgulamada kullanilir. Mesela  boolean sayiKarsilastir=10>5; ifadesini yazdiktan sonra sayiKarsilastir degiskeninin icerisinde artik true degeri olur.
---NOT---
Float tanimlarken sayiyi belirttikten sonra sonuna bir de f harfi koyulur. Aksi takdirde derleyici sayiyi double olarak algilar.
Long tanimlarken ise sayi eger longdan bir kucuk olan integer'in deger araligini asiyorsa long tanimlanan sayinin sonuna L harfi koyulmalidir yoksa derleyici hata verir.


-->Sabit Tanimlama :
-- Sabit tanimlarken normal degisken tanimliyormus gibi tanimliyoruz fakat basina final ifadesi koyuyoruz. Sabit olarak tanimladigimiz seylerin degeri bir kere tanimlandiktan sonra bir daha degisemez. Genelde sabit olarak tanimlanan seylerin isimlerinin tüm harfleri büyük olur ve birden fazla kelime varsa _ ile ayrilir.
--Örnek: final double PI=3.14;

--> Tip Donusumleri : Iki cesit tip donusumu vardir. Implicit ve Explicit.
-- Implicit tip donusumu otomatik donusum saglar. Yani daha dusuk veri türünü daha yüksek veri türüne direkt donusturur.
Örnegin byte x=20; short y=x; yaparsak y'nin degeri 20 olur. Hicbir casting islemi yapmamiza gerek yoktur.
(byte->short->int->long->float->double)
--Explicit tip donusumu: casting islemine tabi tutularak donusturme yapilir. Daha büyük veri türünü daha kucuk veri türüne donusturmek icin kullanilir.###NOT### Bu donusumde veri kaybi yasanabilir.
Kullanimi söyledir : int x; double y=9.99; x=(int)y; Boylece x'in degeri 9 olacaktir cunku int tam sayi tutuyor ve virgülden sonrasi yokmus gibi davraniyor.

--> IF-ELSE IF-ELSE
if icerisinde yazilan kosul saglanmiyorsa else if acip onun icine kosul yazip kontrol edebilir ya da direkt if icerisinde saglanmadigi durumda else blogu acip orda islemlerimizi yapabiliriz.

--> \t : cikti da bir tab bosluk birakir.
--> \n : cikti da bir alt satira kirilim yapar.

Boolean kullanimi örnegi :
isEven = ((number1 + number2)%2 == 0);
System.out.println(isEven); // sayi1 ve sayi2 nin toplami cift ise ekrana true yazdiracak tek ise false yazdiracak.

##2.Hafta 2.Gun##
--> Char ile matematiksel islem yapip sonucu ekrana karakter olarak verebiliyoruz. Mesela alfabeyi yazdirmak icin char kullanilabilir.
--> break; kullanarak ilgili bloktan cikabiliriz.
--> while dongusunun kosul kismina true yazarak dongunun sonsuz donmesinin saglayabiliriz. Donguden elde ettigimiz sonucu alinca da break; ile donguyu kirabiliriz.


##2.Hafta 3.Gun##
--> Stringlerde == operatoru kullanildiginda kontrolu referans adresleri üzerinden sagliyor
Yani String str1="harun"; String str2="harun"; yazdigimizda bu iki string birbirine esit oluyor. Cunku string pool'da olan bir kelime bir kez daha tanimlandiginda o kelimeyi yeniden olusturmuyor. Ama str1 ve str2'yi String sinifindan birer nesne olarak türetseydik her nesne iceriginden bagimsiz farkli adreste oldugu icin degerler esit olmayacakti.

Eger biz stringlerin icerigini kiyaslamak istiyorsak direkt olarak equals methodunu kullanabiliriz.
yani: str1.equals(str2) mi diye sorarsak "harun"=="harun" kiyaslamasini yapip bize true donecek.

--> Switch-Case
-- Switch case ile yapilabilien cogu sey if else ile de yapilabiliyor, fakat switch case'in bazi avantajlari var:
If- else if- else kullaniminda kosula göre tüm bloklari tek tek deniyor. Fakat switch case'de switch'de yazdigimiz ifadeye göre direkt olarak ilgili case'e gidiyor, digerlerini denemiyor. Switch case, if-else'den daha hizli calisiyor.

###NOT### -> case icerisinde yazdigimiz kodlar bittikten sonra mutlaka break; koymaliyiz ki o switch case'den ciksin.
Switch case icerisinde bir de default kismi bulunabilir (bulunmak zorunda degildir.). If else'deki else'e benzer. Hicbir case'e uymuyorsa default calisir.

###NOT### -> switch icerisine condition yazilamaz. Sadece ifade yazilabilir. Switch icerisine girilebilecek ifade türleri : byte, short, int, char, string

Switch Case Kullanim (3 Cesit kullanim mevcuttur.)
1-          switch (month) {
  			case "Ocak":
  				System.out.println("Aylardan Ocak");
  				break;
  			default:
  				System.out.println("Aylardan Ocak degil.");
  				}
2-      int month = 1;
  		String ay = switch (month) {
  			case 1 -> "Ocak";
  			default -> "Yanlis ay girdiniz.";
2.Kullanimda month icerisindeki degere uyan case'e gidip case'in icindeki degeri ay isimli degiskene atadi.
###NOT### -> Bu kullanimda default zorunludur.
3-
        int n=1;
		double sayi1=10;
		double sayi2=20;
		double result;
		double sonuc=switch (n){
			case 1->{
				result=sayi1+sayi2;
				yield result;
			}
			default -> throw new IllegalStateException("Unexpected value: " + n);
Burada da 2. kullanimdakine benzer bir kullanim var fakat burada yield keywordu ile degeri result degiskenine atiyoruz.

##2.Hafta 4.Gun##
--> BigDecimal ve kullanimi: double ve float ile 4 islem yaparken sonuc her zaman dogru cikmayabiliyor. Burada BigDecimal devreye giriyor. BigDecimal ondalikli sayilar ile calisirken ihtiyac duyulabilecek bir sinif. Kesin olarak dogru sonucu donduruyor. Hassas kodlar yazarken mutlaka kullanilmasi gereken bir sinif.

Tanimlama: BigDecimal sayi=new BigDecimal("0.1") -> icerisinde 0.1 degeri bulunan sayi adindan bir nesne türettik.
Toplama: BigDecimal sonuc=sayi.add(sayi); yani sayiyi sayiyla toplama islemi.
Cikarma: BigDecimal sonuc=sayi.subtract(sayi); yani sayidan sayiyi cikarma islemi.
Carpma: BigDecimal sonuc=sayi.multiply(sayi); yani sayiyi sayiyla carpma islemi.
Bolme: BigDecimal sonuc=sayi.divide(sayi); yani sayiyi sayiya bolme islemi.

--> Do while, while ile cok benzerdir. En büyük farkliliklari do

 while'da kosul saglanmasa bile kodlar bir kez calisir.
###NOT### Do while kullaniminda while'dan sonra mutlaka ; konulmalidir.

--> String Methodlar
str1.charAt(2); --> 2.indexindeki karakteri gosterir. Index 0'dan basladigi icin aslinda 3.karakteri gösterecektir.
str1.trim();--> Metnin basinda ve sonundaki whitespace'leri siler.
str1.length();--> String'in uzunlugunu verir.
str1.IndexOf('a');--> a harfinin ilk goruldugu index'i verir.
str1.lastIndexOf('a');--> a harfinin son goruldugu index'i verir.
str1.substring(3);--> 3.index ve sonrasini getirir ÖRNEK: Harun SAKIN icin uyguladigimizda un SAKIN yazar.
str1.substring(6,10);-->6.indexten 10.indexe kadar olan kismi getirir.(10 dahil degil) ÖRNEK: Harun SAKIN icin SAKI yazar.